#include <stdio.h>
#include <stdarg.h>

void int_to_string(char *buffer, int num) {
    int j, i = 0;
    int is_negative = 0;

    if (num < 0) {
        is_negative = 1;
        num = -num;
    }

    do {
        buffer[i++] = '0' + (num % 10);
        num /= 10;
    } while (num > 0);

    if (is_negative) {
        buffer[i++] = '-';
    }

    buffer[i] = '\0'; 

    j = 0;
    i--;
    while (j < i) {
        char temp = buffer[j];
        buffer[j] = buffer[i];
        buffer[i] = temp;
        j++;
        i--;
    }
}

int _printf(const char *format, ...) {
    char int_to_string_buffer[12];
    int count = 0;
    char c, *current_char;
    const char *s;
    int d;
	va_list args;
    va_start(args, format);

    while (*format) {
        if (*format == '%') {
            format++; 

            switch (*format) {
                case 'c':
                    c = (char)va_arg(args, int);
                    putchar(c);
                    count++;
                    break;

                case 's':
                    s = va_arg(args, const char*);
                    while (*s) {
                        putchar(*s);
                        s++;
                        count++;
                    }
                    break;

                case 'd':
                case 'i':
                    d = va_arg(args, int);
                    int_to_string(int_to_string_buffer, d);
                    current_char = int_to_string_buffer;
                    while (*current_char) {
                        putchar(*current_char);
                        current_char++;
                        count++;
                    }
                    break;

                case '%':
                    putchar('%');
                    count++;
                    break;

                default:
                    putchar('%');
                    putchar(*format);
                    count += 2;
                    break;
            }
        } else {
            putchar(*format);
            count++;
        }

        format++;
    }

    va_end(args);
    return count;
}

